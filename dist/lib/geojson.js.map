{"version":3,"file":"geojson.js","sources":["../../src/geojson/geojson.js"],"sourcesContent":["// Takes GeoJSON Properties to return an HTML table, helper function\r\n//    for geojson2mapml\r\n// properties2Table: geojson -> HTML Table\r\nfunction properties2Table(json) {\r\n    let table = document.createElement('table');\r\n\r\n    // Creating a Table Header\r\n    let thead = table.createTHead();\r\n    let row = thead.insertRow();\r\n    let th1 = document.createElement(\"th\");\r\n    let th2 = document.createElement(\"th\");\r\n    th1.appendChild(document.createTextNode(\"Property name\"));\r\n    th2.appendChild(document.createTextNode(\"Property value\"));\r\n    th1.setAttribute(\"role\", \"columnheader\");\r\n    th2.setAttribute(\"role\", \"columnheader\");\r\n    th1.setAttribute(\"scope\", \"col\");\r\n    th2.setAttribute(\"scope\", \"col\");\r\n    row.appendChild(th1);\r\n    row.appendChild(th2);\r\n\r\n    // Creating table body and populating it from the JSON\r\n    let tbody = table.createTBody();\r\n    for (let key in json) {\r\n        if (json.hasOwnProperty(key)) {\r\n\r\n            let row = tbody.insertRow();\r\n            let th = document.createElement(\"th\");\r\n            let td = document.createElement(\"td\");\r\n            th.appendChild(document.createTextNode(key));\r\n            td.appendChild(document.createTextNode(json[key]));\r\n            th.setAttribute(\"scope\", \"row\");\r\n            td.setAttribute(\"itemprop\", key);\r\n            row.appendChild(th);\r\n            row.appendChild(td);\r\n        }\r\n    }\r\n    return table;\r\n}\r\n\r\n// Takes a GeoJSON geojson and an options Object which returns a <layer-> Element\r\n// The options object can contain the following:\r\n//      label            - String, contains the layer name, if included overrides the default label mapping\r\n//      projection       - String, contains the projection of the layer (OSMTILE, WGS84, CBMTILE, APSTILE), defaults to OSMTILE\r\n//      caption          - Function | String, function accepts one argument being the feature object which produces the featurecaption string OR a string that is the name of the property that will be mapped to featurecaption\r\n//      properties       - Function | String | HTMLElement, a function which maps the geojson feature to an HTMLElement or a string that will be parsed as an HTMLElement or an HTMLElement\r\n//      geometryFunction - Function, A function you supply that can add classes, hyperlinks and spans to the created <map-geometry> element, default would be the plain map-geometry element\r\n// geojson2mapml: geojson Object <layer-> -> <layer->\r\nfunction geojson2mapml(json, options = {}, layer = null) {\r\n    let defaults = {\r\n        label: null,\r\n        projection: \"OSMTILE\",\r\n        caption: null,\r\n        properties: null,\r\n        geometryFunction: null\r\n    };\r\n    // assign default values for undefined options\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    // If string json is received\r\n    if (typeof json === \"string\") {\r\n        json = JSON.parse(json);\r\n    }\r\n    let geometryType = [\"POINT\", \"LINESTRING\", \"POLYGON\", \"MULTIPOINT\", \"MULTILINESTRING\", \"MULTIPOLYGON\", \"GEOMETRYCOLLECTION\"];\r\n    let jsonType = json.type.toUpperCase();\r\n    let out = \"\";\r\n\r\n    // HTML parser\r\n    let parser = new DOMParser();\r\n\r\n    // initializing layer\r\n    if (layer === null) {\r\n        // creating an empty mapml layer\r\n        let xmlStringLayer = \"<layer- label='' checked><map-meta name='projection' content='\" + options.projection + \"'></map-meta><map-meta name='cs' content='gcrs'></map-meta></layer->\";\r\n        layer = parser.parseFromString(xmlStringLayer, \"text/html\");\r\n        //console.log(layer)\r\n        if (options.label !== null) {\r\n            layer.querySelector(\"layer-\").setAttribute(\"label\", options.label);\r\n        } else if (json.name) {\r\n            layer.querySelector(\"layer-\").setAttribute(\"label\", json.name);\r\n        } else if (json.title) {\r\n            layer.querySelector(\"layer-\").setAttribute(\"label\", json.title);\r\n        } else{\r\n            layer.querySelector(\"layer-\").setAttribute(\"label\", \"Layer\");\r\n        }\r\n    }\r\n    let point = \"<map-point></map-point>\";\r\n    point = parser.parseFromString(point, \"text/html\");\r\n\r\n    let multiPoint = \"<map-multipoint><map-coordinates></map-coordinates></map-multipoint>\";\r\n    multiPoint = parser.parseFromString(multiPoint, \"text/html\");\r\n\r\n    let linestring = \"<map-linestring><map-coordinates></map-coordinates></map-linestring>\";\r\n    linestring = parser.parseFromString(linestring, \"text/html\");\r\n\r\n    let multilinestring = \"<map-multilinestring></map-multilinestring>\";\r\n    multilinestring = parser.parseFromString(multilinestring, \"text/html\");\r\n\r\n    let polygon = \"<map-polygon></map-polygon>\";\r\n    polygon = parser.parseFromString(polygon, \"text/html\");\r\n\r\n    let multiPolygon = \"<map-multipolygon></map-multipolygon>\";\r\n    multiPolygon = parser.parseFromString(multiPolygon, \"text/html\");\r\n\r\n    let geometrycollection = \"<map-geometrycollection></map-geometrycollection>\";\r\n    geometrycollection = parser.parseFromString(geometrycollection, \"text/html\");\r\n\r\n    let feature = \"<map-feature><map-featurecaption></map-featurecaption><map-geometry></map-geometry><map-properties></map-properties></map-feature>\";\r\n    feature = parser.parseFromString(feature, \"text/html\");\r\n\r\n    // Template to add coordinates to Geometries\r\n    let coords = \"<map-coordinates></map-coordinates>\";\r\n    coords = parser.parseFromString(coords, \"text/html\");\r\n    \r\n    //console.log(layer);\r\n    if (jsonType === \"FEATURECOLLECTION\") {\r\n        \r\n        // Setting bbox if it exists\r\n        if (json.bbox) {\r\n            layer.querySelector(\"layer-\").insertAdjacentHTML(\"afterbegin\", \"<map-meta name='extent' content='top-left-longitude=\" + json.bbox[0] + \", top-left-latitude=\" + json.bbox[1] + \", bottom-right-longitude=\" + json.bbox[2] + \",bottom-right-latitude=\" + json.bbox[3] + \"'></map-meta>\");\r\n        }\r\n\r\n        let features = json.features;\r\n        //console.log(\"Features length - \" + features.length);\r\n        for (let l=0;l<features.length;l++) {\r\n            geojson2mapml(features[l], options, layer);\r\n        }\r\n    } else if (jsonType === \"FEATURE\") {\r\n\r\n        let clone_feature = feature.cloneNode(true);\r\n        let curr_feature = clone_feature.querySelector('map-feature');\r\n        \r\n        // Setting bbox if it exists\r\n        if (json.bbox) {\r\n            layer.querySelector(\"layer-\").insertAdjacentHTML(\"afterbegin\", \"<map-meta name='extent' content='top-left-longitude=\" + json.bbox[0] + \", top-left-latitude=\" + json.bbox[1] + \", bottom-right-longitude=\" + json.bbox[2] + \",bottom-right-latitude=\" + json.bbox[3] + \"'></map-meta>\");\r\n        }\r\n\r\n        // Setting featurecaption\r\n        let featureCaption = layer.querySelector(\"layer-\").getAttribute('label');\r\n        if (typeof options.caption === \"function\") {\r\n            featureCaption = options.caption(json);\r\n        } else if (typeof options.caption === \"string\") {\r\n            featureCaption = json.properties[options.caption];\r\n            // if property does not exist\r\n            if (featureCaption === undefined) {\r\n                featureCaption = options.caption;\r\n            }\r\n        }\r\n        curr_feature.querySelector(\"map-featurecaption\").innerHTML = featureCaption;\r\n\r\n        // Setting Properties\r\n        let p;\r\n        // if properties function is passed\r\n        if (typeof options.properties === \"function\") {\r\n            p = options.properties(json);\r\n            // if function output is not an element, ignore the properties.\r\n            if (!(p instanceof Element)) {\r\n                p = false;\r\n                console.error(\"options.properties function returns a string instead of an HTMLElement.\");\r\n            }\r\n        } else if (typeof options.properties === \"string\") { // if properties string is passed\r\n            curr_feature.querySelector('map-properties').insertAdjacentHTML(\"beforeend\", options.properties);\r\n            p = false;\r\n        } else if (options.properties instanceof HTMLElement) { // if an HTMLElement is passed - NOT TESTED\r\n            p = options.properties;\r\n        } else { // If no properties function, string or HTMLElement is passed\r\n            p = properties2Table(json.properties);\r\n        }\r\n        \r\n        if (p) {\r\n            curr_feature.querySelector('map-properties').appendChild(p);\r\n        }\r\n\r\n        // Setting map-geometry\r\n        let g = geojson2mapml(json.geometry, options, layer);\r\n        if (typeof options.geometryFunction === \"function\") {\r\n            curr_feature.querySelector('map-geometry').appendChild(options.geometryFunction(g, json));\r\n        } else {\r\n            curr_feature.querySelector('map-geometry').appendChild(g);\r\n        }\r\n        \r\n        // Appending feature to layer\r\n        layer.querySelector('layer-').appendChild(curr_feature);\r\n        \r\n    } else if (geometryType.includes(jsonType)) {\r\n        //console.log(\"Geometry Type - \" + jsonType);\r\n        switch(jsonType){\r\n            case \"POINT\":\r\n                out = json.coordinates[0] + \" \" + json.coordinates[1];\r\n                \r\n                // Create Point element\r\n                let clone_point = point.cloneNode(true);\r\n                clone_point = clone_point.querySelector('map-point');\r\n\r\n                // Create map-coords to add to the polygon\r\n                let clone_coords = coords.cloneNode(true);\r\n                clone_coords = clone_coords.querySelector(\"map-coordinates\");\r\n\r\n                clone_coords.innerHTML = out;\r\n\r\n                clone_point.appendChild(clone_coords);\r\n                //console.log(clone_point);\r\n                return clone_point;\r\n\r\n            case \"LINESTRING\":\r\n                let clone_linestring = linestring.cloneNode(true);\r\n                let linestring_coordindates = clone_linestring.querySelector(\"map-coordinates\");\r\n                \r\n                out = \"\";\r\n\r\n                for (let x=0;x<json.coordinates.length;x++) {\r\n                    out = out + json.coordinates[x][0] + \" \" + json.coordinates[x][1] + \" \";\r\n                }\r\n\r\n                linestring_coordindates.innerHTML = out;\r\n                //console.log(clone_linestring.querySelector('map-linestring'));\r\n                return (clone_linestring.querySelector('map-linestring'));\r\n\r\n            case \"POLYGON\":\r\n                let clone_polygon = polygon.cloneNode(true);\r\n                clone_polygon = clone_polygon.querySelector(\"map-polygon\");\r\n                \r\n                // Going over each coordinates\r\n                for (let y=0;y<json.coordinates.length;y++) {\r\n                    let out = \"\";\r\n                    let clone_coords = coords.cloneNode(true);\r\n                    clone_coords = clone_coords.querySelector(\"map-coordinates\");\r\n\r\n                    // Going over coordinates for the polygon\r\n                    for (let x=0;x<json.coordinates[y].length;x++) {\r\n                        out = out + json.coordinates[y][x][0] + \" \" + json.coordinates[y][x][1] + \" \";\r\n                    }\r\n\r\n                    // Create map-coordinates element and append it to clone_polygon\r\n                    clone_coords.innerHTML = out;\r\n\r\n                    clone_polygon.appendChild(clone_coords);\r\n                }\r\n                //console.log(clone_polygon);\r\n                return clone_polygon;\r\n\r\n            case \"MULTIPOINT\":\r\n                out = \"\";\r\n                // Create multipoint element\r\n                let clone_multipoint = multiPoint.cloneNode(true);\r\n                clone_multipoint = clone_multipoint.querySelector('map-multipoint');\r\n\r\n                for (let i=0;i<json.coordinates.length;i++) {\r\n                    out = out + json.coordinates[i][0] + \" \" + json.coordinates[i][1] + \" \";\r\n                }\r\n                clone_multipoint.querySelector('map-coordinates').innerHTML = out;\r\n                return clone_multipoint;\r\n\r\n            case \"MULTILINESTRING\":\r\n                let clone_multilinestring = multilinestring.cloneNode(true);\r\n                clone_multilinestring = clone_multilinestring.querySelector(\"map-multilinestring\");\r\n\r\n                for(let i=0;i<json.coordinates.length;i++) {\r\n                    let out = \"\";\r\n                    let clone_coords = coords.cloneNode(true);\r\n                    clone_coords = clone_coords.querySelector(\"map-coordinates\");\r\n                    for(let y=0;y<json.coordinates[i].length;y++) {\r\n                        out = out + json.coordinates[i][y][0] + \" \" + json.coordinates[i][y][1] + \" \";\r\n                    }\r\n                    clone_coords.innerHTML = out;\r\n                    clone_multilinestring.appendChild(clone_coords);\r\n                }\r\n                return clone_multilinestring;\r\n\r\n            case \"MULTIPOLYGON\":\r\n                let m = multiPolygon.cloneNode(true);\r\n                m = m.querySelector('map-multiPolygon');\r\n\r\n                // Going over each Polygon\r\n                for (let i=0;i<json.coordinates.length;i++) {\r\n                    let clone_polygon = polygon.cloneNode(true);\r\n                    clone_polygon = clone_polygon.querySelector(\"map-polygon\");\r\n                    \r\n                    // Going over each coordinates\r\n                    for (let y=0;y<json.coordinates[i].length;y++) {\r\n                        let out = \"\";\r\n                        let clone_coords = coords.cloneNode(true);\r\n                        clone_coords = clone_coords.querySelector(\"map-coordinates\");\r\n\r\n                        // Going over coordinates for the polygon\r\n                        for (let x=0;x<json.coordinates[i][y].length;x++) {\r\n                            out = out + json.coordinates[i][y][x][0] + \" \" + json.coordinates[i][y][x][1] + \" \";\r\n                        }\r\n\r\n                        // Create map-coordinates element and append it to clone_polygon\r\n                        clone_coords.innerHTML = out;\r\n\r\n                        clone_polygon.appendChild(clone_coords);\r\n                    }\r\n                    m.appendChild(clone_polygon);\r\n                }\r\n                return m;\r\n            case \"GEOMETRYCOLLECTION\": // ---------------------------------------------------------------------------\r\n                let g = geometrycollection.cloneNode(true);\r\n                g = g.querySelector('map-geometrycollection');\r\n                //console.log(json.geometries);\r\n                for (let i=0;i<json.geometries.length;i++) {\r\n                    let fg = geojson2mapml(json.geometries[i], options, layer);\r\n                    g.appendChild(fg);\r\n                }\r\n                return g;\r\n        }\r\n    }\r\n    return layer.querySelector('layer-');\r\n}\r\n\r\n// Takes an array of length n to return an array of arrays with length 2, helper function\r\n//    for mapml2geojson\r\n// breakArray: arr(float) -> arr(arr(float, float))\r\nfunction breakArray(arr) {\r\n    let size = 2; \r\n    let arrayOfArrays = [];\r\n    // removing anything other than numbers, ., - (used to remove <map-span> tags)\r\n    arr = arr.filter(x => !(/[^\\d.-]/g.test(x))).filter(x => x);\r\n    for (let i=0; i<arr.length; i+=size) {\r\n        arrayOfArrays.push((arr.slice(i,i+size)).map(Number));\r\n    }\r\n    return arrayOfArrays;\r\n}\r\n\r\n// Takes an HTML Table to return geojson properties, helper function\r\n//    for mapml2geojson\r\n// table2properties: HTML Table -> geojson\r\nfunction table2properties(table) {\r\n    // removing thead, if it exists\r\n    let head = table.querySelector(\"thead\");\r\n    if (head !== null) {\r\n        table.querySelector(\"thead\").remove();\r\n    }\r\n    let json = {};\r\n    table.querySelectorAll('tr').forEach((tr) => {\r\n        let tableData = tr.querySelectorAll('th, td');\r\n        json[tableData[0].innerHTML] = tableData[1].innerHTML;\r\n    });\r\n    return json;\r\n}\r\n\r\n// Converts a geometry element to geojson, helper function\r\n//    for mapml2geojson\r\n// geometry2geojson: (child of <map-geometry>), Proj4, Proj4, Bool -> geojson\r\nfunction geometry2geojson(el, source, dest, transform) {\r\n    let elem = el.nodeName;\r\n    let j = {};\r\n    let coord;\r\n\r\n    switch(elem.toUpperCase()) {\r\n        case \"MAP-POINT\":\r\n            j.type = \"Point\";\r\n            if (transform) {\r\n                let pointConv = proj4.transform(source, dest, ((el.querySelector('map-coordinates').innerHTML.split(/[<>\\ ]/g)).map(Number)) );\r\n                j.coordinates = [pointConv.x, pointConv.y];\r\n            } else {\r\n                j.coordinates = (el.querySelector('map-coordinates').innerHTML.split(/[<>\\ ]/g)).map(Number);\r\n            }\r\n            break;\r\n        case \"MAP-LINESTRING\":\r\n            j.type = \"LineString\";\r\n            coord = el.querySelector('map-coordinates').innerHTML.split(/[<>\\ ]/g);\r\n            coord = breakArray(coord);\r\n            if (transform) {\r\n                coord = pcrsToGcrs(coord, source, dest);\r\n            }\r\n            j.coordinates = coord;\r\n            break;\r\n        case \"MAP-POLYGON\":\r\n            j.type = \"Polygon\";\r\n            j.coordinates = [];\r\n            let x = 0;\r\n            el.querySelectorAll('map-coordinates').forEach((coord) => {\r\n                coord = coord.innerHTML.split(/[<>\\ ]/g);\r\n                coord = breakArray(coord);\r\n                if (transform) {\r\n                    coord = pcrsToGcrs(coord, source, dest);\r\n                }\r\n                j.coordinates[x] = coord;\r\n                x++;\r\n            });\r\n            break;\r\n        case \"MAP-MULTIPOINT\":\r\n            j.type = \"MultiPoint\";\r\n            coord = breakArray(el.querySelector('map-coordinates').innerHTML.split(/[<>\\ ]/g));\r\n            if (transform) {\r\n                coord = pcrsToGcrs(coord, source, dest);\r\n            }\r\n            j.coordinates = coord;\r\n            break;\r\n        case \"MAP-MULTILINESTRING\":\r\n            j.type = \"MultiLineString\";\r\n            j.coordinates = [];\r\n            let i = 0;\r\n            el.querySelectorAll('map-coordinates').forEach((coord) => {\r\n                coord = coord.innerHTML.split(/[<>\\ ]/g);\r\n                coord = breakArray(coord);\r\n                if (transform) {\r\n                    coord = pcrsToGcrs(coord, source, dest);\r\n                }\r\n                j.coordinates[i] = coord;\r\n                i++;\r\n            });\r\n            break;\r\n        case \"MAP-MULTIPOLYGON\":\r\n            j.type = \"MultiPolygon\";\r\n            j.coordinates = [];\r\n            let p = 0;\r\n            el.querySelectorAll('map-polygon').forEach((poly) => {\r\n                let y = 0;\r\n                j.coordinates.push([]);\r\n                poly.querySelectorAll('map-coordinates').forEach((coord) => {\r\n                    coord = coord.innerHTML.split(/[<>\\ ]/g);\r\n                    coord = breakArray(coord);\r\n                    if (transform) {\r\n                        coord = pcrsToGcrs(coord, source, dest);\r\n                    }\r\n                    j.coordinates[p].push([]);\r\n                    j.coordinates[p][y] = coord;\r\n                    y++;\r\n                });\r\n                p++;\r\n            });\r\n            break;\r\n    }\r\n    return j;\r\n}\r\n\r\n// pcrsToGcrs: arrof([x,y]) Proj4, Proj4 -> arrof[x,y]\r\nfunction pcrsToGcrs (arr, source, dest) {\r\n    let newArr = [];\r\n    for (let i=0; i<arr.length; i++) {\r\n        let conv = proj4.transform(source, dest, arr[i]);\r\n        conv = [conv.x, conv.y];\r\n        newArr.push(conv);\r\n    }\r\n    return newArr;\r\n}\r\n\r\n// Takes an <layer-> element and returns a geojson feature collection object \r\n// The options object can contain the following:\r\n//      propertyFunction   - function(<map-properties>), A function that maps the features' <map-properties> element to a GeoJSON \"properties\" member.\r\n//      transform          - Bool, Transform coordinates to gcrs values, defaults to True\r\n// mapml2geojson: <layer-> Object -> GeoJSON\r\nfunction mapml2geojson(element, options = {}) {\r\n    let defaults = {\r\n        propertyFunction: null,\r\n        transform: true\r\n    };\r\n    // assign default values for undefined options\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    let json = {};\r\n    json.type = \"FeatureCollection\";\r\n    json.title = element.getAttribute('label');\r\n    json.features = [];\r\n\r\n    // Transforming Coordinates to gcrs if transformation = true and coordinate is not (EPSG:3857 or EPSG:4326)\r\n    let source = null;\r\n    let dest = null;\r\n    if (options.transform) {\r\n        source = new proj4.Proj(element.parentElement._map.options.crs.code);\r\n        dest = new proj4.Proj('EPSG:4326');\r\n        if (element.parentElement._map.options.crs.code === \"EPSG:3857\" || element.parentElement._map.options.crs.code === \"EPSG:4326\") {\r\n            options.transform = false;\r\n        }   \r\n    }\r\n\r\n    // Setting all meta settings, if any\r\n    let metas = element.querySelectorAll(\"map-meta\");\r\n    metas.forEach((meta) => {\r\n        let name = meta.getAttribute('name');\r\n        if (name === \"extent\") {\r\n            let content = meta.getAttribute('content');\r\n            let arr = content.split(\",\");\r\n            let ex = {};\r\n            for (let i=0; i<arr.length; i++) {\r\n                let s = arr[i].split(\"=\");\r\n                s[0] = s[0].trim(); // removing whitespace\r\n                s[1] = parseFloat(s[1]);\r\n                ex[s[0]] = s[1];\r\n            }\r\n            json.bbox = [ex['top-left-longitude'], ex['top-left-latitude'], ex['bottom-right-longitude'], ex['bottom-right-latitude']];\r\n        }\r\n    });\r\n\r\n    // Iterating over each feature\r\n    let features = element.querySelectorAll(\"map-feature\");\r\n    let num = 0;\r\n\r\n    // Going over each feature in the layer\r\n    features.forEach((feature) => {\r\n        //console.log(feature);\r\n\r\n        json.features[num] = {\"type\": \"Feature\"};\r\n        json.features[num].geometry = {};\r\n        json.features[num].properties = {};\r\n\r\n        // setting properties when function presented\r\n        if (typeof options.propertyFunction === \"function\") {\r\n            let properties = options.propertyFunction(feature.querySelector(\"map-properties\"));\r\n            json.features[num].properties = properties;\r\n        } else if (feature.querySelector(\"map-properties\").querySelector('table') !== null) { \r\n            // setting properties when table presented\r\n            let properties = table2properties(feature.querySelector(\"map-properties\").querySelector('table'));\r\n            json.features[num].properties = properties;\r\n        } else {\r\n            // when no table present, strip any possible html tags to only get text\r\n            json.features[num].properties = {prop0: (feature.querySelector(\"map-properties\").innerHTML).replace( /(<([^>]+)>)/ig, '')};\r\n        }\r\n\r\n        let geom = feature.querySelector(\"map-geometry\");\r\n        let elem = geom.children[0].nodeName;\r\n\r\n        // Adding Geometry\r\n        if (elem.toUpperCase() !== \"MAP-GEOMETRYCOLLECTION\"){\r\n            json.features[num].geometry = geometry2geojson(geom.children[0], source, dest, options.transform);\r\n        } else {\r\n            json.features[num].geometry.type = \"GeometryCollection\";\r\n            json.features[num].geometry.geometries = [];\r\n            \r\n            let geoms = geom.querySelector('map-geometrycollection').children;\r\n            Array.from(geoms).forEach((g) => {\r\n                g = geometry2geojson(g, source, dest, options.transform);\r\n                json.features[num].geometry.geometries.push(g);\r\n            });\r\n        }\r\n        //going to next feature\r\n        num++;\r\n    });\r\n    \r\n    return json;\r\n}\r\n"],"names":["properties2Table","json","let","table","document","createElement","thead","createTHead","row","insertRow","th1","th2","appendChild","createTextNode","setAttribute","tbody","createTBody","key","hasOwnProperty","th","td","geojson2mapml","options","layer","Object","assign","label","projection","caption","properties","geometryFunction","jsonType","JSON","parse","type","toUpperCase","out","parser","DOMParser","xmlStringLayer","parseFromString","querySelector","name","title","point","multiPoint","linestring","multilinestring","polygon","multiPolygon","geometrycollection","feature","coords","bbox","insertAdjacentHTML","features","l","length","clone_feature","cloneNode","curr_feature","featureCaption","getAttribute","undefined","innerHTML","p","Element","console","error","HTMLElement","g","geometry","includes","coordinates","clone_point","clone_coords","clone_linestring","linestring_coordindates","x","clone_polygon","y","clone_multipoint","i","clone_multilinestring","m","geometries","fg","breakArray","arr","arrayOfArrays","filter","test","push","slice","map","Number","table2properties","remove","querySelectorAll","forEach","tableData","tr","geometry2geojson","el","source","dest","transform","elem","nodeName","j","coord","pointConv","proj4","split","pcrsToGcrs","poly","newArr","conv","mapml2geojson","element","propertyFunction","Proj","parentElement","_map","crs","code","metas","meta","content","ex","s","trim","parseFloat","num","prop0","replace","geom","children","geoms","Array","from"],"mappings":"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"}