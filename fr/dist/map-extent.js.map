{"version":3,"file":"map-extent.js","sources":["../src/map-extent.js"],"sourcesContent":["export class MapExtent extends HTMLElement {\n  static get observedAttributes() {\n    return ['units','checked','label','opacity'];\n  }\n  get units() {\n   return this.getAttribute('units');\n  }\n  set units(val) {\n    // built in support for OSMTILE, CBMTILE, WGS84 and APSTILE\n    if (['OSMTILE','CBMTILE','WGS84','APSTILE'].includes(val)) {\n      this.setAttribute('units',val);\n    }\n    // else need to check with the mapml-viewer element if the custom projection is defined\n  }\n  get checked() {\n    return this.hasAttribute('checked');\n  }\n  \n  set checked(val) {\n    if (val) {\n      this.setAttribute('checked', '');\n    } else {\n      this.removeAttribute('checked');\n    }\n  }\n  get label() {\n    return this.hasAttribute('label')?this.getAttribute('label'):'';\n  }\n  set label(val) {\n    if (val) {\n      this.setAttribute('label',val);\n    }\n  }\n  get opacity(){\n    return this._opacity;\n  }\n\n  set opacity(val) {\n    if(+val > 1 || +val < 0) return;\n    this.setAttribute('opacity', val);\n  }\n  attributeChangedCallback(name, oldValue, newValue) {\n    switch(name) {\n      case 'units':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'label': \n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'checked': \n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'opacity':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n    }\n  }\n  constructor() {\n    // Always call super first in constructor\n    super();    \n  }\n  connectedCallback() {\n    if(this.querySelector('map-link[rel=query], map-link[rel=features]') && !this.shadowRoot) {\n      this.attachShadow({mode: 'open'});\n    }\n    let parentLayer = this.parentNode.nodeName.toUpperCase() === \"LAYER-\" ? this.parentNode : this.parentNode.host;\n    if (!parentLayer._layer) {\n      // for custom projection cases, the MapMLLayer has not yet created and binded with the layer- at this point,\n      // because the \"createMap\" event of mapml-viewer has not yet been dispatched, the map has not yet been created \n      // the event will be dispatched after defineCustomProjection > projection setter\n      // should wait until MapMLLayer is built\n      parentLayer.parentNode.addEventListener('createmap', (e) => {\n        this._layer = parentLayer._layer;\n      });\n    } else {\n      this._layer = parentLayer._layer;\n    }\n  }\n  disconnectedCallback() {\n    \n  }\n}"],"names":["MapExtent","HTMLElement","observedAttributes","units","this","getAttribute","val","includes","setAttribute","checked","hasAttribute","removeAttribute","label","opacity","_opacity","attributeChangedCallback","name","oldValue","newValue","constructor","super","connectedCallback","querySelector","shadowRoot","attachShadow","mode","let","parentLayer","parentNode","nodeName","toUpperCase","host","_layer","addEventListener","disconnectedCallback"],"mappings":";;MAAaA,kBAAkBC,YAC7BC,gCACE,MAAO,CAAC,QAAQ,UAAU,QAAQ,WAEpCC,YACC,OAAOC,KAAKC,aAAa,SAE1BF,UAAUG,GAEJ,CAAC,UAAU,UAAU,QAAQ,WAAWC,SAASD,IACnDF,KAAKI,aAAa,QAAQF,GAI9BG,cACE,OAAOL,KAAKM,aAAa,WAG3BD,YAAYH,GACNA,EACFF,KAAKI,aAAa,UAAW,IAE7BJ,KAAKO,gBAAgB,WAGzBC,YACE,OAAOR,KAAKM,aAAa,SAASN,KAAKC,aAAa,SAAS,GAE/DO,UAAUN,GACJA,GACFF,KAAKI,aAAa,QAAQF,GAG9BO,cACE,OAAOT,KAAKU,SAGdD,YAAYP,GACA,GAANA,IAAYA,EAAM,GACtBF,KAAKI,aAAa,UAAWF,GAE/BS,yBAAyBC,EAAMC,EAAUC,GAChCF,EAuBTG,cAEEC,QAEFC,oBACKjB,KAAKkB,cAAc,iDAAmDlB,KAAKmB,YAC5EnB,KAAKoB,aAAa,CAACC,KAAM,SAE3BC,IAAIC,EAAyD,WAA3CvB,KAAKwB,WAAWC,SAASC,cAA6B1B,KAAKwB,WAAaxB,KAAKwB,WAAWG,KACrGJ,EAAYK,OASf5B,KAAK4B,OAASL,EAAYK,OAJ1BL,EAAYC,WAAWK,iBAAiB,YAAa,IACnD7B,KAAK4B,OAASL,EAAYK,SAMhCE,gCAtFWlC"}