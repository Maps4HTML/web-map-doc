{"version":3,"file":"map-feature.js","sources":["../src/map-feature.js"],"sourcesContent":["export class MapFeature extends HTMLElement {\n  static get observedAttributes() {\n    return ['zoom', 'min', 'max'];\n  }\n\n  get zoom() {\n    return +(this.hasAttribute('zoom') ? this.getAttribute('zoom') : 0);\n  }\n\n  set zoom(val) {\n    var parsedVal = parseInt(val, 10);\n    if (!isNaN(parsedVal) && parsedVal >= this.min && parsedVal <= this.max) {\n      this.setAttribute('zoom', parsedVal);\n    }\n  }\n\n  get min() {\n    // fallback: the minimum zoom bound of layer- element\n    return +(this.hasAttribute('min')\n      ? this.getAttribute('min')\n      : this._layer._layerEl.extent.zoom.minZoom);\n  }\n\n  set min(val) {\n    var parsedVal = parseInt(val, 10);\n    if (!isNaN(parsedVal)) {\n      if (\n        parsedVal >= this._layer._layerEl.extent.zoom.minZoom &&\n        parsedVal <= this._layer._layerEl.extent.zoom.maxZoom\n      ) {\n        this.setAttribute('min', parsedVal);\n      } else {\n        this.setAttribute('min', this._layer._layerEl.extent.zoom.minZoom);\n      }\n    }\n  }\n\n  get max() {\n    // fallback: the maximum zoom bound of layer- element\n    return +(this.hasAttribute('max')\n      ? this.getAttribute('max')\n      : this._layer._layerEl.extent.zoom.maxZoom);\n  }\n\n  set max(val) {\n    var parsedVal = parseInt(val, 10);\n    if (!isNaN(parsedVal)) {\n      if (\n        parsedVal >= this._layer._layerEl.extent.zoom.minZoom &&\n        parsedVal <= this._layer._layerEl.extent.zoom.maxZoom\n      ) {\n        this.setAttribute('max', parsedVal);\n      } else {\n        this.setAttribute('max', this._layer._layerEl.extent.zoom.maxZoom);\n      }\n    }\n  }\n\n  get extent() {\n    if (this.isConnected) {\n      // if the feature extent is the first time to be calculated or the feature extent is changed (by changing\n      // the innertext of map-coordinates), then calculate feature extent by invoking the getFeatureExtent function\n      if (!this._getFeatureExtent) {\n        this._getFeatureExtent = this._memoizeExtent();\n      }\n      return this._getFeatureExtent();\n    }\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    switch (name) {\n      case 'zoom': {\n        if (oldValue !== newValue && this._layer) {\n          let layer = this._layer,\n            layerEl = layer._layerEl,\n            mapmlvectors = layer._mapmlvectors;\n          // if the vector layer only has static features, should update zoom bounds when zoom attribute is changed\n          if (mapmlvectors?._staticFeature) {\n            this._removeInFeatureList(oldValue);\n            let native = this._getNativeZoomAndCS(layer._content);\n            mapmlvectors.zoomBounds = mapmlvectors._getZoomBounds(\n              layerEl.shadowRoot || layerEl,\n              native.zoom\n            );\n          }\n          this._removeFeature();\n          this._updateFeature();\n        }\n        break;\n      }\n    }\n  }\n\n  constructor() {\n    // Always call super first in constructor\n    super();\n  }\n\n  connectedCallback() {\n    // if mapFeature element is not connected to layer- or layer-'s shadowroot,\n    // or the parent layer- element has a \"data-moving\" attribute\n    if (\n      (this.parentNode.nodeType !== document.DOCUMENT_FRAGMENT_NODE &&\n        this.parentNode.nodeName.toLowerCase() !== 'layer-') ||\n      (this.parentNode.nodeType === document.DOCUMENT_FRAGMENT_NODE &&\n        this.parentNode.host.hasAttribute('data-moving')) ||\n      (this.parentNode.nodeName.toLowerCase() === 'layer-' &&\n        this.parentNode.hasAttribute('data-moving'))\n    ) {\n      return;\n    }\n    // set up the map-feature object properties\n    this._addFeature();\n    // use observer to monitor the changes in mapFeature's subtree\n    // (i.e. map-properties, map-featurecaption, map-coordinates)\n    this._observer = new MutationObserver((mutationList) => {\n      for (let mutation of mutationList) {\n        // the attributes changes of <map-feature> element should be handled by attributeChangedCallback()\n        if (mutation.type === 'attributes' && mutation.target === this) {\n          return;\n        }\n        // re-render feature if there is any observed change\n        this._removeFeature();\n        this._updateFeature();\n      }\n    });\n    this._observer.observe(this, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeOldValue: true,\n      characterData: true\n    });\n  }\n\n  disconnectedCallback() {\n    if (this._layer._layerEl.hasAttribute('data-moving')) return;\n    this._removeFeature();\n    this._observer.disconnect();\n  }\n\n  _removeFeature() {\n    // if the <layer- > el is disconnected\n    // the <g> el has already got removed at this point\n    if (this._groupEl?.isConnected) {\n      this._groupEl.remove();\n    }\n    // if the <layer- > el has already been disconnected,\n    // then _map.removeLayer(layerEl._layer) has already been invoked (inside layerEl.disconnectedCallback())\n    // this._featureGroup has already got removed at this point\n    if (this._featureGroup?._map) {\n      this._featureGroup._map.removeLayer(this._featureGroup);\n      let mapmlvectors = this._layer._mapmlvectors;\n      if (mapmlvectors) {\n        if (mapmlvectors._staticFeature) {\n          if (mapmlvectors._features[this.zoom]) {\n            this._removeInFeatureList(this.zoom);\n          }\n          let container = this._layer.shadowRoot || this._layer._layerEl;\n          // update zoom bounds of vector layer\n          mapmlvectors.zoomBounds = mapmlvectors._getZoomBounds(\n            container,\n            this._getNativeZoomAndCS(this._layer._content).zoom\n          );\n        }\n        mapmlvectors.options.properties = null;\n        delete mapmlvectors._layers[this._featureGroup._leaflet_id];\n      }\n    }\n    delete this._featureGroup;\n    delete this._groupEl;\n    // ensure that feature extent can be re-calculated everytime that map-feature element is updated / re-added\n    if (this._getFeatureExtent) delete this._getFeatureExtent;\n  }\n\n  _addFeature() {\n    this._parentEl =\n      this.parentNode.nodeName.toUpperCase() === 'LAYER-' ||\n      this.parentNode.nodeName.toUpperCase() === 'MAP-EXTENT'\n        ? this.parentNode\n        : this.parentNode.host;\n\n    // arrow function is not hoisted, define before use\n    var _attachedToMap = (e) => {\n      if (!this._parentEl._layer._map) {\n        // if the parent layer- el has not yet added to the map (i.e. not yet rendered), wait until it is added\n        this._layer.once(\n          'attached',\n          function () {\n            this._map = this._layer._map;\n          },\n          this\n        );\n      } else {\n        this._map = this._layer._map;\n      }\n      // \"synchronize\" the event handlers between map-feature and <g>\n      if (!this.querySelector('map-geometry')) return;\n      if (!this._layer._mapmlvectors) {\n        // if vector layer has not yet created (i.e. the layer- is not yet rendered on the map / layer is empty)\n        let layerEl = this._layer._layerEl;\n        this._layer.once('add', this._setUpEvents, this);\n        if (\n          !layerEl.querySelector('map-extent, map-tile') &&\n          !layerEl.hasAttribute('src') &&\n          layerEl.querySelectorAll('map-feature').length === 1\n        ) {\n          // if the map-feature is added to an empty layer, fire extentload to create vector layer\n          // must re-run _initialize of MapMLLayer.js to re-set layer._extent (layer._extent is null for an empty layer)\n          this._layer._initialize(layerEl);\n          this._layer.fire('extentload');\n        }\n        return;\n      } else if (!this._featureGroup) {\n        // if the map-feature el or its subtree is updated\n        // this._featureGroup has been free in this._removeFeature()\n        this._updateFeature();\n      } else {\n        this._setUpEvents();\n      }\n    };\n\n    if (!this._parentEl._layer) {\n      // for custom projection cases, the MapMLLayer has not yet created and binded with the layer- at this point,\n      // because the \"createMap\" event of mapml-viewer has not yet been dispatched, the map has not yet been created\n      // the event will be dispatched after defineCustomProjection > projection setter\n      // should wait until MapMLLayer is built\n      let parentLayer =\n        this._parentEl.nodeName.toUpperCase() === 'LAYER-'\n          ? this._parentEl\n          : this._parentEl.parentElement || this._parentEl.parentNode.host;\n      parentLayer.parentNode.addEventListener('createmap', (e) => {\n        this._layer = parentLayer._layer;\n        _attachedToMap();\n      });\n    } else {\n      this._layer = this._parentEl._layer;\n      _attachedToMap();\n    }\n  }\n\n  _updateFeature() {\n    let mapmlvectors = this._layer._mapmlvectors;\n    // if the parent layer has not yet rendered on the map\n    if (!mapmlvectors) return;\n    // if the <layer- > is not removed, then regenerate featureGroup and update the mapmlvectors accordingly\n    let native = this._getNativeZoomAndCS(this._layer._content);\n    this._featureGroup = mapmlvectors.addData(this, native.cs, native.zoom);\n    mapmlvectors._layers[this._featureGroup._leaflet_id] = this._featureGroup;\n    this._groupEl = this._featureGroup.options.group;\n    if (mapmlvectors._staticFeature) {\n      let container = this._layer.shadowRoot || this._layer._layerEl;\n      // update zoom bounds of vector layer\n      mapmlvectors.zoomBounds = mapmlvectors._getZoomBounds(\n        container,\n        this._getNativeZoomAndCS(this._layer._content).zoom\n      );\n      // add feature layers to map\n      mapmlvectors._resetFeatures();\n      // update map's zoom limit\n      this._map._addZoomLimit(mapmlvectors);\n      L.extend(mapmlvectors.options, mapmlvectors.zoomBounds);\n    }\n    this._setUpEvents();\n  }\n\n  _setUpEvents() {\n    ['click', 'focus', 'blur', 'keyup', 'keydown'].forEach((name) => {\n      // when <g> is clicked / focused / blurred\n      // should dispatch the click / focus / blur event listener on **linked HTMLFeatureElements**\n      this._groupEl.addEventListener(name, (e) => {\n        if (name === 'click') {\n          // dispatch a cloned mouseevent to trigger the click event handlers set on HTMLFeatureElement\n          let clickEv = new PointerEvent(name, { cancelable: true });\n          clickEv.originalEvent = e;\n          this.dispatchEvent(clickEv);\n        } else if (name === 'keyup' || name === 'keydown') {\n          let keyEv = new KeyboardEvent(name, { cancelable: true });\n          keyEv.originalEvent = e;\n          this.dispatchEvent(keyEv);\n        } else {\n          // dispatch a cloned focusevent to trigger the focus/blue event handlers set on HTMLFeatureElement\n          let focusEv = new FocusEvent(name, { cancelable: true });\n          focusEv.originalEvent = e;\n          this.dispatchEvent(focusEv);\n        }\n      });\n    });\n  }\n\n  _getNativeZoomAndCS(content) {\n    // content: referred to <layer- > if the <layer- > has inline <map-extent>, <map-feature> or <map-tile>\n    //          referred to remote mapml if the <layer- > has a src attribute, and the fetched mapml contains <map-feature>\n    //          referred to null otherwise (i.e. <layer- > has fetched <map-extent> in shadow, the <map-feature> attaches to <map-extent>'s shadow)\n    let nativeZoom, nativeCS;\n    if (this._extentEl) {\n      // feature attaches to extent's shadow\n      if (this._extentEl.querySelector('map-link[rel=query]')) {\n        // for query, fallback zoom is the current map zoom level that the query is returned\n        nativeZoom = this._map.getZoom();\n        nativeCS = 'pcrs';\n      } else if (this._extentEl.querySelector('map-link[rel=features]')) {\n        // for templated feature, read fallback from the fetched mapml's map-meta[name=zoom / cs]\n        nativeZoom = this._extentEl._nativeZoom;\n        nativeCS = this._extentEl._nativeCS;\n      }\n      return { zoom: nativeZoom, cs: nativeCS };\n    } else {\n      // feature attaches to layer- or layer-'s shadow\n      if (content.nodeType === Node.DOCUMENT_NODE) {\n        // for features migrated from mapml, read native zoom and cs from the remote mapml\n        return this._layer._mapmlvectors._getNativeVariables(content);\n      } else if (content.nodeName.toUpperCase() === 'LAYER-') {\n        // for inline features, read native zoom and cs from inline map-meta\n        let zoomMeta = this._parentEl.querySelectorAll('map-meta[name=zoom]'),\n          zoomLength = zoomMeta?.length;\n        nativeZoom = zoomLength\n          ? +zoomMeta[zoomLength - 1]\n              .getAttribute('content')\n              ?.split(',')\n              .find((str) => str.includes('value'))\n              ?.split('=')[1]\n          : 0;\n\n        let csMeta = this._parentEl.querySelectorAll('map-meta[name=cs]'),\n          csLength = csMeta?.length;\n        nativeCS = csLength\n          ? csMeta[csLength - 1].getAttribute('content')\n          : 'pcrs';\n        return { zoom: nativeZoom, cs: nativeCS };\n      }\n    }\n  }\n\n  // Util functions:\n  // internal method to calculate the extent of the feature and store it in cache for the first time\n  // and return cache when feature's extent is repeatedly requested\n  // for .extent\n  _memoizeExtent() {\n    // memoize calculated extent\n    let extentCache;\n    return function () {\n      if (extentCache && this._getFeatureExtent) {\n        // if the extent has already been calculated and is not updated, return stored extent\n        return extentCache;\n      } else {\n        // calculate feature extent\n        let map = this._map,\n          geometry = this.querySelector('map-geometry'),\n          native = this._getNativeZoomAndCS(this._layer._content),\n          cs = geometry.getAttribute('cs') || native.cs,\n          // zoom level that the feature rendered at\n          zoom = this.zoom || native.zoom,\n          shapes = geometry.querySelectorAll(\n            'map-point, map-linestring, map-polygon, map-multipoint, map-multilinestring'\n          ),\n          bboxExtent = [\n            Infinity,\n            Infinity,\n            Number.NEGATIVE_INFINITY,\n            Number.NEGATIVE_INFINITY\n          ];\n        for (let shape of shapes) {\n          let coord = shape.querySelectorAll('map-coordinates');\n          for (let i = 0; i < coord.length; ++i) {\n            bboxExtent = _updateExtent(shape, coord[i], bboxExtent);\n          }\n        }\n        let topLeft = L.point(bboxExtent[0], bboxExtent[1]);\n        let bottomRight = L.point(bboxExtent[2], bboxExtent[3]);\n        let pcrsBound = M.boundsToPCRSBounds(\n          L.bounds(topLeft, bottomRight),\n          zoom,\n          map.options.projection,\n          cs\n        );\n        if (\n          shapes.length === 1 &&\n          shapes[0].tagName.toUpperCase() === 'MAP-POINT'\n        ) {\n          let projection = map.options.projection,\n            maxZoom = this.hasAttribute('max')\n              ? +this.getAttribute('max')\n              : M[projection].options.resolutions.length - 1,\n            tileCenter = M[projection].options.crs.tile.bounds.getCenter(),\n            pixel = M[projection].transformation.transform(\n              pcrsBound.min,\n              M[projection].scale(+this.zoom || maxZoom)\n            );\n          pcrsBound = M.pixelToPCRSBounds(\n            L.bounds(pixel.subtract(tileCenter), pixel.add(tileCenter)),\n            this.zoom || maxZoom,\n            projection\n          );\n        }\n        let result = M._convertAndFormatPCRS(pcrsBound, map);\n        // memoize calculated result\n        extentCache = result;\n        return result;\n      }\n    };\n\n    // update the bboxExtent\n    function _updateExtent(shape, coord, bboxExtent) {\n      let data = coord.innerHTML\n        .trim()\n        .replace(/<[^>]+>/g, '')\n        .replace(/\\s+/g, ' ')\n        .split(/[<>\\ ]/g);\n      switch (shape.tagName) {\n        case 'MAP-POINT':\n          bboxExtent = M._updateExtent(bboxExtent, +data[0], +data[1]);\n          break;\n        case 'MAP-LINESTRING':\n        case 'MAP-POLYGON':\n        case 'MAP-MULTIPOINT':\n        case 'MAP-MULTILINESTRING':\n          for (let i = 0; i < data.length; i += 2) {\n            bboxExtent = M._updateExtent(bboxExtent, +data[i], +data[i + 1]);\n          }\n          break;\n        default:\n          break;\n      }\n      return bboxExtent;\n    }\n  }\n\n  // find and remove the feature from mapmlvectors._features if vector layer only contains static features, helper function\n  //      prevent it from being rendered again when zooming in / out (mapmlvectors.resetFeature() is invoked)\n  _removeInFeatureList(zoom) {\n    let mapmlvectors = this._layer._mapmlvectors;\n    for (let i = 0; i < mapmlvectors._features[zoom].length; ++i) {\n      let feature = mapmlvectors._features[zoom][i];\n      if (feature._leaflet_id === this._featureGroup._leaflet_id) {\n        mapmlvectors._features[zoom].splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  getMaxZoom() {\n    let tL = this.extent.topLeft.pcrs,\n      bR = this.extent.bottomRight.pcrs,\n      bound = L.bounds(\n        L.point(tL.horizontal, tL.vertical),\n        L.point(bR.horizontal, bR.vertical)\n      );\n    let projection = this._map.options.projection,\n      layerZoomBounds = this._layer._layerEl.extent.zoom,\n      minZoom = layerZoomBounds.minZoom ? layerZoomBounds.minZoom : 0,\n      maxZoom = layerZoomBounds.maxZoom\n        ? layerZoomBounds.maxZoom\n        : M[projection].options.resolutions.length - 1;\n    let newZoom;\n    if (this.hasAttribute('zoom')) {\n      // if there is a zoom attribute set to the map-feature, zoom to the zoom attribute value\n      newZoom = this.zoom;\n    } else {\n      // if not, calculate the maximum zoom level that can show the feature completely\n      newZoom = M.getMaxZoom(bound, this._map, minZoom, maxZoom);\n      if (this.max < newZoom) {\n        // if the calculated zoom is greater than the value of max zoom attribute, go with max zoom attribute\n        newZoom = this.max;\n      } else if (this.min > newZoom) {\n        // if the calculated zoom is less than the value of min zoom attribute, go with min zoom attribute\n        newZoom = this.min;\n      }\n    }\n    // prevent overzooming / underzooming\n    if (newZoom < minZoom) {\n      newZoom = minZoom;\n    } else if (newZoom > maxZoom) {\n      newZoom = maxZoom;\n    }\n\n    // should check whether the extent after zooming falls into the templated extent bound\n    return newZoom;\n  }\n\n  // internal support for returning a GeoJSON representation of <map-feature> geometry\n  // The options object can contain the following:\n  //      propertyFunction   - function(<map-properties>), A function that maps the features' <map-properties> element to a GeoJSON \"properties\" member.\n  //      transform          - Bool, Transform coordinates to gcrs values, defaults to True\n  // mapml2geojson: <map-feature> Object -> GeoJSON\n  mapml2geojson(options) {\n    let defaults = {\n      propertyFunction: null,\n      transform: true\n    };\n    // assign default values for undefined options\n    options = Object.assign({}, defaults, options);\n\n    let json = {\n      type: 'Feature',\n      properties: {},\n      geometry: {}\n    };\n    let el = this.querySelector('map-properties');\n    if (!el) {\n      json.properties = null;\n    } else if (typeof options.propertyFunction === 'function') {\n      json.properties = options.propertyFunction(el);\n    } else if (el.querySelector('table')) {\n      // setting properties when table presented\n      let table = el.querySelector('table').cloneNode(true);\n      json.properties = M._table2properties(table);\n    } else {\n      // when no table present, strip any possible html tags to only get text\n      json.properties = {\n        prop0: el.innerHTML.replace(/(<([^>]+)>)/gi, '').replace(/\\s/g, '')\n      };\n    }\n\n    // transform to gcrs if options.transform = true (default)\n    let source = null,\n      dest = null;\n    if (options.transform) {\n      source = new proj4.Proj(this._map.options.crs.code);\n      dest = new proj4.Proj('EPSG:4326');\n      if (\n        this._map.options.crs.code === 'EPSG:3857' ||\n        this._map.options.crs.code === 'EPSG:4326'\n      ) {\n        options.transform = false;\n      }\n    }\n\n    let collection = this.querySelector('map-geometry').querySelector(\n        'map-geometrycollection'\n      ),\n      shapes = this.querySelector('map-geometry').querySelectorAll(\n        'map-point, map-polygon, map-linestring, map-multipoint, map-multipolygon, map-multilinestring'\n      );\n\n    if (collection) {\n      json.geometry.type = 'GeometryCollection';\n      json.geometry.geometries = [];\n      for (let shape of shapes) {\n        json.geometry.geometries.push(\n          M._geometry2geojson(shape, source, dest, options.transform)\n        );\n      }\n    } else {\n      json.geometry = M._geometry2geojson(\n        shapes[0],\n        source,\n        dest,\n        options.transform\n      );\n    }\n    return json;\n  }\n\n  // a method that simulates a click, or invoking the user-defined click event\n  click() {\n    let g = this._groupEl,\n      rect = g.getBoundingClientRect();\n    let event = new MouseEvent('click', {\n      clientX: rect.x + rect.width / 2,\n      clientY: rect.y + rect.height / 2,\n      button: 0\n    });\n    let properties = this.querySelector('map-properties');\n    if (g.getAttribute('role') === 'link') {\n      for (let path of g.children) {\n        path.mousedown.call(this._featureGroup, event);\n        path.mouseup.call(this._featureGroup, event);\n      }\n    }\n    // dispatch click event for map-feature to allow events entered by 'addEventListener'\n    let clickEv = new PointerEvent('click', { cancelable: true });\n    clickEv.originalEvent = event;\n    this.dispatchEvent(clickEv);\n    // for custom projection, layer- element may disconnect and re-attach to the map after the click\n    // so check whether map-feature element is still connected before any further operations\n    if (properties && this.isConnected) {\n      let featureGroup = this._featureGroup,\n        shapes = featureGroup._layers;\n      // close popup if the popup is currently open\n      for (let id in shapes) {\n        if (shapes[id].isPopupOpen()) {\n          shapes[id].closePopup();\n        }\n      }\n      if (featureGroup.isPopupOpen()) {\n        featureGroup.closePopup();\n      } else if (!clickEv.originalEvent.cancelBubble) {\n        // If stopPropagation is not set on originalEvent by user\n        featureGroup.openPopup();\n      }\n    }\n  }\n\n  // a method that sets the current focus to the <g> element, or invoking the user-defined focus event\n  //      options (optional): as options parameter for native HTMLElement\n  //                          https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n  focus(options) {\n    this._groupEl.focus(options);\n  }\n\n  // a method that makes the <g> element lose focus, or invoking the user-defined blur event\n  blur() {\n    if (\n      document.activeElement.shadowRoot?.activeElement === this._groupEl ||\n      document.activeElement.shadowRoot?.activeElement.parentNode ===\n        this._groupEl\n    ) {\n      this._groupEl.blur();\n      // set focus to the map container\n      this._map._container.focus();\n    }\n  }\n\n  // a method that can the viewport to be centred on the feature's extent\n  zoomTo() {\n    let extent = this.extent,\n      map = this._map;\n    let tL = extent.topLeft.pcrs,\n      bR = extent.bottomRight.pcrs,\n      bound = L.bounds(\n        L.point(tL.horizontal, tL.vertical),\n        L.point(bR.horizontal, bR.vertical)\n      ),\n      center = map.options.crs.unproject(bound.getCenter(true));\n    map.setView(center, this.getMaxZoom(), { animate: false });\n  }\n}\n"],"names":["MapFeature","HTMLElement","observedAttributes","zoom","this","hasAttribute","getAttribute","val","parsedVal","parseInt","isNaN","min","max","setAttribute","_layer","_layerEl","extent","minZoom","maxZoom","isConnected","_getFeatureExtent","_memoizeExtent","attributeChangedCallback","name","oldValue","newValue","let","layer","layerEl","mapmlvectors","_mapmlvectors","_staticFeature","_removeInFeatureList","native","_getNativeZoomAndCS","_content","zoomBounds","_getZoomBounds","shadowRoot","_removeFeature","_updateFeature","constructor","super","connectedCallback","parentNode","nodeType","document","DOCUMENT_FRAGMENT_NODE","nodeName","toLowerCase","host","_addFeature","_observer","MutationObserver","mutation","mutationList","type","target","observe","childList","subtree","attributes","attributeOldValue","characterData","disconnectedCallback","disconnect","_groupEl","remove","_featureGroup","_map","removeLayer","container","_features","options","properties","_layers","_leaflet_id","_parentEl","toUpperCase","_attachedToMap","once","querySelector","_setUpEvents","querySelectorAll","length","_initialize","fire","parentLayer","parentElement","addEventListener","addData","cs","group","_resetFeatures","_addZoomLimit","L","extend","forEach","clickEv","PointerEvent","cancelable","originalEvent","e","dispatchEvent","keyEv","KeyboardEvent","focusEv","FocusEvent","content","nativeZoom","nativeCS","_extentEl","getZoom","_nativeZoom","_nativeCS","Node","DOCUMENT_NODE","_getNativeVariables","zoomMeta","zoomLength","split","find","str","includes","csMeta","csLength","extentCache","map","geometry","shapes","bboxExtent","Infinity","Number","NEGATIVE_INFINITY","shape","coord","i","data","innerHTML","trim","replace","tagName","M","_updateExtent","topLeft","point","bottomRight","pcrsBound","boundsToPCRSBounds","bounds","projection","resolutions","tileCenter","crs","tile","getCenter","pixel","transformation","transform","scale","pixelToPCRSBounds","subtract","add","result","_convertAndFormatPCRS","splice","getMaxZoom","tL","pcrs","bR","bound","horizontal","vertical","layerZoomBounds","newZoom","mapml2geojson","Object","assign","propertyFunction","json","el","table","cloneNode","_table2properties","prop0","source","dest","proj4","Proj","code","collection","geometries","push","_geometry2geojson","click","g","rect","getBoundingClientRect","event","MouseEvent","clientX","x","width","clientY","y","height","button","path","children","mousedown","call","mouseup","featureGroup","id","isPopupOpen","closePopup","cancelBubble","openPopup","focus","blur","activeElement","_container","zoomTo","center","unproject","setView","animate"],"mappings":"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"}