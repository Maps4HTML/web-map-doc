{"version":3,"file":"map-link.js","sources":["../src/map-link.js"],"sourcesContent":["export class MapLink extends HTMLElement {\n  static get observedAttributes() {\n    return [\n      'type',\n      'rel',\n      'title',\n      'href',\n      'hreflang',\n      'tref',\n      'tms',\n      'projection'\n    ];\n  }\n  get type() {\n    return this.getAttribute('type');\n  }\n  set type(val) {\n    // improve this\n    if (val === 'text/mapml' || val.startsWith('image/')) {\n      this.setAttribute('type', val);\n    }\n  }\n  get rel() {\n    return this.getAttribute('rel');\n  }\n  set rel(val) {\n    // improve this\n    if (\n      [\n        'license',\n        'alternate',\n        'self',\n        'style',\n        'tile',\n        'image',\n        'features',\n        'zoomin',\n        'zoomout',\n        'legend',\n        'query',\n        'stylesheet'\n      ].includes(val)\n    ) {\n      this.setAttribute('type', val);\n    }\n  }\n  get title() {\n    return this.getAttribute('title');\n  }\n  set title(val) {\n    if (val) {\n      this.setAttribute('title', val);\n    }\n  }\n  get href() {\n    return this.getAttribute('href');\n  }\n  set href(val) {\n    // improve this\n    if (val) {\n      this.setAttribute('href', val);\n    }\n  }\n  get hreflang() {\n    return this.getAttribute('hreflang');\n  }\n  set hreflang(val) {\n    // improve this\n    if (val) {\n      this.setAttribute('hreflang', val);\n    }\n  }\n  get tref() {\n    return this.getAttribute('tref');\n  }\n  set tref(val) {\n    // improve this\n    if (val) {\n      this.setAttribute('tref', val);\n    }\n  }\n  get tms() {\n    return this.hasAttribute('tms');\n  }\n  set tms(val) {\n    // improve this\n    if (val) {\n      this.setAttribute('tms', '');\n    }\n  }\n  get projection() {\n    return this.getAttribute('projection');\n  }\n  set projection(val) {\n    // improve this\n    if (['OSMTILE', 'CBMTILE', 'WGS84', 'APSTILE'].includes(val)) {\n      this.setAttribute('projection', val);\n    }\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    //['type','rel','title','href','hreflang','tref','tms','projection'];\n    switch (name) {\n      case 'type':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'rel':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'title':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'href':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'hreflang':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'tref':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'tms':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n      case 'projection':\n        if (oldValue !== newValue) {\n          // handle side effects\n        }\n        break;\n    }\n  }\n  constructor() {\n    // Always call super first in constructor\n    super();\n  }\n  connectedCallback() {}\n  disconnectedCallback() {}\n\n  // Resolve the templated URL with info from the sibling map-input's\n  resolve() {\n    if (this.tref) {\n      let obj = {};\n      const inputs = this.parentElement.querySelectorAll('map-input');\n      if (this.rel === 'image') {\n        // image/map\n        for (let i = 0; i < inputs.length; i++) {\n          const inp = inputs[i];\n          obj[inp.name] = inp.value;\n        }\n        console.log(obj); // DEBUGGING\n        return L.Util.template(this.tref, obj);\n      } else if (this.rel === 'tile') {\n        // TODO. Need to get tile coords from moveend\n        // should be done/called from the TemplatedTilelayer.js file\n        return obj;\n      } else if (this.rel === 'query') {\n        // TODO. Need to get the click coords from click event\n        // should be done/called from the templatedlayer.js file\n      } else if (this.rel === 'features') {\n        // TODO.\n      }\n    }\n  }\n}\n"],"names":["MapLink","HTMLElement","observedAttributes","type","this","getAttribute","val","startsWith","setAttribute","rel","includes","title","href","hreflang","tref","tms","hasAttribute","projection","attributeChangedCallback","name","oldValue","newValue","constructor","super","connectedCallback","disconnectedCallback","resolve","let","obj","inputs","parentElement","querySelectorAll","i","length","inp","value","console","log","L","Util","template"],"mappings":";;MAAaA,gBAAgBC,YAC3BC,gCACE,MAAO,CACL,OACA,MACA,QACA,OACA,WACA,OACA,MACA,cAGJC,WACE,OAAOC,KAAKC,aAAa,QAE3BF,SAASG,GAEK,eAARA,IAAwBA,EAAIC,WAAW,WACzCH,KAAKI,aAAa,OAAQF,GAG9BG,UACE,OAAOL,KAAKC,aAAa,OAE3BI,QAAQH,GAGJ,CACE,UACA,YACA,OACA,QACA,OACA,QACA,WACA,SACA,UACA,SACA,QACA,cACAI,SAASJ,IAEXF,KAAKI,aAAa,OAAQF,GAG9BK,YACE,OAAOP,KAAKC,aAAa,SAE3BM,UAAUL,GACJA,GACFF,KAAKI,aAAa,QAASF,GAG/BM,WACE,OAAOR,KAAKC,aAAa,QAE3BO,SAASN,GAEHA,GACFF,KAAKI,aAAa,OAAQF,GAG9BO,eACE,OAAOT,KAAKC,aAAa,YAE3BQ,aAAaP,GAEPA,GACFF,KAAKI,aAAa,WAAYF,GAGlCQ,WACE,OAAOV,KAAKC,aAAa,QAE3BS,SAASR,GAEHA,GACFF,KAAKI,aAAa,OAAQF,GAG9BS,UACE,OAAOX,KAAKY,aAAa,OAE3BD,QAAQT,GAEFA,GACFF,KAAKI,aAAa,MAAO,IAG7BS,iBACE,OAAOb,KAAKC,aAAa,cAE3BY,eAAeX,GAET,CAAC,UAAW,UAAW,QAAS,WAAWI,SAASJ,IACtDF,KAAKI,aAAa,aAAcF,GAIpCY,yBAAyBC,EAAMC,EAAUC,GAE/BF,EA2CVG,cAEEC,QAEFC,qBACAC,wBAGAC,UACE,GAAItB,KAAKU,KAAM,CACba,IAAIC,EAAM,GACV,IAAMC,EAASzB,KAAK0B,cAAcC,iBAAiB,aACnD,GAAiB,UAAb3B,KAAKK,IAAiB,CAExB,IAAKkB,IAAIK,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAAK,CACtC,IAAME,EAAML,EAAOG,GACnBJ,EAAIM,EAAIf,MAAQe,EAAIC,MAGtB,OADAC,QAAQC,IAAIT,GACLU,EAAEC,KAAKC,SAASpC,KAAKU,KAAMc,GAC7B,GAAiB,SAAbxB,KAAKK,IAGd,OAAOmB,EACe,UAAbxB,KAAKK,KAGLL,KAAKK,aA5KTT"}